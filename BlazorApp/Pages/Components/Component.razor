@page "/component"
@using BlazorApp.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@* <style>
    .messages-container {
        overflow-y: auto;
    }
</style> *@
<h1>@SelectedUser.Email</h1>
@* <div id="messagesContainer" class="messages-container"> *@
<div>
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in messages)
            {
				    <tr>
					    <td>@message.UserId</td>
					    <td>@message.Context</td>
				    </tr>
            }
        </tbody>
    </table>
</div>

@* <script>
    window.scrollToBottom = function (messagesContainer) {
        console.log("scrollToBottom called");
        var element = document.getElementById(messagesContainer);
        element.scrollTop = element.scrollHeight;
        
    }
    //window.scrollTo(0, document.getElementById("messagesContainer"));
</script> *@
@code {
    [Parameter]
    public User SelectedUser { get; set; }
    private HubConnection? hubConnection;
    public string updateOn;
    public List<Message> messages = new List<Message>();

    private string email;

    protected override async Task OnInitializedAsync()
    {
        email = SelectedUser.Email;
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7141/chat")
            .Build();

        hubConnection.On<Message>("NewMessage", (incomingMessage) =>
        {
            InvokeAsync(() =>
            {
                if (incomingMessage.Email == email)
                {
                    messages.Add(incomingMessage);
                    updateOn = DateTime.Now.ToLongTimeString();
                    StateHasChanged();
                    ScrollToBottom();
                }
            });
        });

        try
        {
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinUser", email);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR hub: {ex.Message}");
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messagesContainer");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
