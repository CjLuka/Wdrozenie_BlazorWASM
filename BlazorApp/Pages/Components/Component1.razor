@page "/mycomponent1"
@using BlazorApp.Models
@using Microsoft.AspNetCore.SignalR.Client

@if (messages != null)
{
    <h1>Komponent1</h1>
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in messages)
            {
                <tr>
                    <td>@message.UserId</td>
                    <td>@message.Key</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No messages available.</p>
}

@code {
    private HubConnection? hubConnection;
    public List<Message> messages;
    public string updateOn;
    //[Parameter] public int userId { get; set; }

    public string email = "test@o2.pl";


    protected override async Task OnInitializedAsync()
    {
        messages = new List<Message>();
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7141/chat")
            .Build();

        //await hubConnection.SendAsync(nameof(MyHub))

        hubConnection.On<Message>("NewMessage", (incomingMessage) =>
        {
            InvokeAsync(() =>
            {

                if(incomingMessage.Email == email)
                {
                    //userId = incomingMessage.UserId;
                    messages.Add(incomingMessage);
                    updateOn = DateTime.Now.ToLongTimeString();
                    StateHasChanged();
                }

            });
        });
        // hubConnection.On<Message>("ReceiveMessage", (incomingMessage) =>
        // {
        //     InvokeAsync(() =>
        //     {

        //         // if(incomingMessage.Email == email)
        //         // {
        //         //userId = incomingMessage.UserId;
        //         messages.Add(incomingMessage);
        //         updateOn = DateTime.Now.ToLongTimeString();
        //         StateHasChanged();
        //         //}

        //     });
        // });
        try
        {
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinUser", email);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR hub: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
