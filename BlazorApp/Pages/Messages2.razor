@page "/messages2"
@using BlazorApp.Models
@using Microsoft.AspNetCore.SignalR.Client

<h3>Messages from API</h3>

@if (messages != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in messages)
            {
                <tr>
                    <td>@message.UserId</td>
                    <td>@message.Context</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No messages available.</p>
}

@code {
    private HubConnection? hubConnection;
    public List<Message> messages;
    public string updateOn;

    protected override async Task OnInitializedAsync()
    {
        messages = new List<Message>();
        // Uruchomienie połączenia SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7141/chat")
            .Build();

        hubConnection.On<Message>("ReceiveMessage2", (incomingMessage) =>
        {
            //Console.WriteLine($"Received message: {message.UserId}: {message.Context}");
            messages.Add(incomingMessage);
            updateOn = DateTime.Now.ToLongTimeString();
            StateHasChanged();
        });
        try
        {
            await hubConnection.StartAsync();
            await FetchInitialMessagesFromApi();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR hub: {ex.Message}");
            // Możesz zdecydować, co zrobić w przypadku błędu, na przykład wyświetlić komunikat o błędzie użytkownikowi
        }
    }
    private async Task FetchInitialMessagesFromApi()
    {
        var apiUrl = "https://localhost:7141/api/messages";
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync(apiUrl);

        if (response.IsSuccessStatusCode)
        {
            // var initialMessages = await response.Content.ReadAsAsync<List<Message>>();
            // messages.AddRange(initialMessages);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error fetching initial messages: {response.StatusCode}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
